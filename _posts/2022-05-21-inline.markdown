---
# layout: default
title:  Inlining in LLVM
# date:   2022-05-31 01:19:00 -0000
# categories: bitcoin
---

As you probably know what inlining in coding means? 'Inline' is an function attribute, when specified it instead of calling the function it copies the code of that function at the site of caller. Even I knew only this about inlining, and then for one of the issues at work I had get my hands dirty and look how it's done in LLVM.

So let's dive in.

In LLVM, it starts from [*llvm::InlineFunction:InlineFunction.cpp:1748*](https://llvm.org/doxygen/namespacellvm.html#a7e39b6f753eab4236840973d7f6ddbfe) Before starting to inline the functions it checks for some cases which are not covered yet, such as *callbr* instruction is not covered, it also doesn't inline external and indirect function. The cloning of the code from callee to caller's callsite starts with [*CloneAndPruneFunctionInto:InlineFunction.cpp:1953*](https://llvm.org/doxygen/namespacellvm.html#a7a6386c071e1087512cdc8a4071a02b5) and it starts with cloning the entry block and anything reachable from it's SCC(strongly connected component) graph. After all the basic blocks are cloned, it resolves PHI nodes and simplifies the instructions and conditional branches. After copying it at the place of callsite, it checks in the [operand bundles](https://llvm.org/docs/LangRef.html#operand-bundles) if there's some deopt is mentioned to perform in parent function. Takes care of all the fixing the line numbers, and all the return instruction and tail calls in cloned function. 

